{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Guna\\\\Documents\\\\test\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PhoneInput from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\"; // Import CSS for default styling\nimport { parsePhoneNumber } from \"react-phone-number-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [phone, setPhone] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n  const handlePhoneChange = value => {\n    setPhone(value);\n    setIsValid(validatePhoneNumber(value));\n  };\n  const validatePhoneNumber = phoneNumber => {\n    try {\n      const parsedPhoneNumber = parsePhoneNumber(phoneNumber);\n      if (!parsedPhoneNumber) return false; // If parsing fails, return false\n      // Check if it's a valid phone number and if its type is mobile\n      return parsedPhoneNumber.isValid() && parsedPhoneNumber.getType() === \"MOBILE\";\n    } catch (error) {\n      return false; // If any error occurs during parsing, return false\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Phone Number:\", /*#__PURE__*/_jsxDEV(PhoneInput, {\n        value: phone,\n        onChange: handlePhoneChange,\n        placeholder: \"Enter phone number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), !isValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"Invalid mobile phone number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ooleFoGcrATiMfgr9hN9fpT2Uk0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PhoneInput","parsePhoneNumber","jsxDEV","_jsxDEV","App","_s","phone","setPhone","isValid","setIsValid","handlePhoneChange","value","validatePhoneNumber","phoneNumber","parsedPhoneNumber","getType","error","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Guna/Documents/test/my-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport PhoneInput from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\"; // Import CSS for default styling\nimport { parsePhoneNumber } from \"react-phone-number-input\";\n\nfunction App() {\n  const [phone, setPhone] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n\n  const handlePhoneChange = (value) => {\n    setPhone(value);\n    setIsValid(validatePhoneNumber(value));\n  };\n\n  const validatePhoneNumber = (phoneNumber) => {\n    try {\n      const parsedPhoneNumber = parsePhoneNumber(phoneNumber);\n      if (!parsedPhoneNumber) return false; // If parsing fails, return false\n      // Check if it's a valid phone number and if its type is mobile\n      return (\n        parsedPhoneNumber.isValid() && parsedPhoneNumber.getType() === \"MOBILE\"\n      );\n    } catch (error) {\n      return false; // If any error occurs during parsing, return false\n    }\n  };\n\n  return (\n    <div>\n      <label>\n        Phone Number:\n        <PhoneInput\n          value={phone}\n          onChange={handlePhoneChange}\n          placeholder=\"Enter phone number\"\n        />\n      </label>\n      {!isValid && <p style={{ color: \"red\" }}>Invalid mobile phone number</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAO,oCAAoC,CAAC,CAAC;AAC7C,SAASC,gBAAgB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMW,iBAAiB,GAAIC,KAAK,IAAK;IACnCJ,QAAQ,CAACI,KAAK,CAAC;IACfF,UAAU,CAACG,mBAAmB,CAACD,KAAK,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,mBAAmB,GAAIC,WAAW,IAAK;IAC3C,IAAI;MACF,MAAMC,iBAAiB,GAAGb,gBAAgB,CAACY,WAAW,CAAC;MACvD,IAAI,CAACC,iBAAiB,EAAE,OAAO,KAAK,CAAC,CAAC;MACtC;MACA,OACEA,iBAAiB,CAACN,OAAO,CAAC,CAAC,IAAIM,iBAAiB,CAACC,OAAO,CAAC,CAAC,KAAK,QAAQ;IAE3E,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;EAED,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,GAAO,eAEL,eAAAd,OAAA,CAACH,UAAU;QACTW,KAAK,EAAEL,KAAM;QACbY,QAAQ,EAAER,iBAAkB;QAC5BS,WAAW,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,EACP,CAACf,OAAO,iBAAIL,OAAA;MAAGqB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAR,QAAA,EAAC;IAA2B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV;AAAClB,EAAA,CAnCQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAqCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}