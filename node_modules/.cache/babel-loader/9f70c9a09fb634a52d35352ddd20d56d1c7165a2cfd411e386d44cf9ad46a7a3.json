{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Guna\\\\Documents\\\\test\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PhoneInput from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\"; // Import CSS for default styling\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [phone, setPhone] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handlePhoneChange = value => {\n    if (typeof value === \"string\") {\n      // Ensure value is a string before parsing\n      setPhone(value);\n      const validationResult = validatePhoneNumber(value);\n      setIsValid(validationResult.isValid);\n      setErrorMessage(validationResult.errorMessage);\n    }\n  };\n  const validatePhoneNumber = phoneNumber => {\n    const parsedPhoneNumber = parsePhoneNumberFromString(phoneNumber, \"ZZ\");\n    if (!parsedPhoneNumber) return {\n      isValid: false,\n      errorMessage: \"Invalid phone number format\"\n    };\n    // Check if it's a mobile number\n    if (parsedPhoneNumber.getType() !== \"MOBILE\") return {\n      isValid: false,\n      errorMessage: \"Only mobile numbers are allowed\"\n    };\n    return {\n      isValid: true,\n      errorMessage: \"\"\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Phone Number:\", /*#__PURE__*/_jsxDEV(PhoneInput, {\n        value: phone,\n        onChange: handlePhoneChange,\n        placeholder: \"Enter phone number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), !isValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"U4FtbGgms/wg0DA94oalC8b+h6Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PhoneInput","parsePhoneNumberFromString","jsxDEV","_jsxDEV","App","_s","phone","setPhone","isValid","setIsValid","errorMessage","setErrorMessage","handlePhoneChange","value","validationResult","validatePhoneNumber","phoneNumber","parsedPhoneNumber","getType","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Guna/Documents/test/my-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport PhoneInput from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\"; // Import CSS for default styling\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\n\nfunction App() {\n  const [phone, setPhone] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handlePhoneChange = (value) => {\n    if (typeof value === \"string\") {\n      // Ensure value is a string before parsing\n      setPhone(value);\n      const validationResult = validatePhoneNumber(value);\n      setIsValid(validationResult.isValid);\n      setErrorMessage(validationResult.errorMessage);\n    }\n  };\n\n  const validatePhoneNumber = (phoneNumber) => {\n    const parsedPhoneNumber = parsePhoneNumberFromString(phoneNumber, \"ZZ\");\n    if (!parsedPhoneNumber)\n      return { isValid: false, errorMessage: \"Invalid phone number format\" };\n    // Check if it's a mobile number\n    if (parsedPhoneNumber.getType() !== \"MOBILE\")\n      return {\n        isValid: false,\n        errorMessage: \"Only mobile numbers are allowed\",\n      };\n    return { isValid: true, errorMessage: \"\" };\n  };\n\n  return (\n    <div>\n      <label>\n        Phone Number:\n        <PhoneInput\n          value={phone}\n          onChange={handlePhoneChange}\n          placeholder=\"Enter phone number\"\n        />\n      </label>\n      {!isValid && <p style={{ color: \"red\" }}>{errorMessage}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAO,oCAAoC,CAAC,CAAC;AAC7C,SAASC,0BAA0B,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMa,iBAAiB,GAAIC,KAAK,IAAK;IACnC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACAN,QAAQ,CAACM,KAAK,CAAC;MACf,MAAMC,gBAAgB,GAAGC,mBAAmB,CAACF,KAAK,CAAC;MACnDJ,UAAU,CAACK,gBAAgB,CAACN,OAAO,CAAC;MACpCG,eAAe,CAACG,gBAAgB,CAACJ,YAAY,CAAC;IAChD;EACF,CAAC;EAED,MAAMK,mBAAmB,GAAIC,WAAW,IAAK;IAC3C,MAAMC,iBAAiB,GAAGhB,0BAA0B,CAACe,WAAW,EAAE,IAAI,CAAC;IACvE,IAAI,CAACC,iBAAiB,EACpB,OAAO;MAAET,OAAO,EAAE,KAAK;MAAEE,YAAY,EAAE;IAA8B,CAAC;IACxE;IACA,IAAIO,iBAAiB,CAACC,OAAO,CAAC,CAAC,KAAK,QAAQ,EAC1C,OAAO;MACLV,OAAO,EAAE,KAAK;MACdE,YAAY,EAAE;IAChB,CAAC;IACH,OAAO;MAAEF,OAAO,EAAE,IAAI;MAAEE,YAAY,EAAE;IAAG,CAAC;EAC5C,CAAC;EAED,oBACEP,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,GAAO,eAEL,eAAAhB,OAAA,CAACH,UAAU;QACTa,KAAK,EAAEP,KAAM;QACbc,QAAQ,EAAER,iBAAkB;QAC5BS,WAAW,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,EACP,CAACjB,OAAO,iBAAIL,OAAA;MAAGuB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAR,QAAA,EAAET;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV;AAACpB,EAAA,CAzCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}